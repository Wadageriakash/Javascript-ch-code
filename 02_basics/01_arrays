// JavaScript arrays are resizable and can contain a mix data types.
// JavaScript arrays are zero-based indexing.
// JavaScript  arrays-cpoy-operation create shallow-copies.(All standard built-in copy operation with any javascript objects create shallow copies, rather than deep copies).
// A deep copy of an object is a copy whose properties do not share the same reference.
// A shallow copy of an object is a copy whose properties share the same reference.

// 1. Mutator Methods (Modify the original array):
//=====================================================================================================================
// push(): Adds one or more elements to the end of an array and returns the new length.
// pop(): Removes the last element from an array and returns that element.
// shift(): Removes the first element from an array and returns that element.
// unshift(): Adds one or more elements to the beginning of an array and returns the new length.
// splice(): Changes the contents of an array by removing or replacing existing elements and/or adding new elements.
// sort(): Sorts the elements of an array in place and returns the array.
// reverse(): Reverses the order of the elements in an array in place.
// fill(): Fills all the elements of an array from a start index to an end index with a static value.

// 2. Accessor Methods (Do not modify the original array):
//======================================================================================================================
// concat(): Joins two or more arrays and returns a new array.
// slice(): Returns a shallow copy of a portion of an array into a new array. 
// indexOf(): Returns the first index at which a given element can be found in the array, or -1 if it is not present.
// lastIndexOf(): Returns the last index at which a given element can be found in the array, or -1 if it is not present.
// includes(): Determines whether an array includes a certain value among its entries, returning true or false.
// join(): Joins all elements of an array into a string.
// toString(): Returns a string representing the specified array and its elements.
// at(): Returns an indexed element from the array, supporting negative indices to count from the end.

// 3. Iteration Methods (Iterate over array elements):
// forEach(): Executes a provided function once for each array element.
// map(): Creates a new array populated with the results of calling a provided function on every element in the calling array.
// filter(): Creates a new array with all elements that pass the test implemented by the provided function.
// reduce(): Executes a reducer function on each element of the array, resulting in a single output value.
// every(): Tests whether all elements in the array pass the test implemented by the provided function.
// some(): Tests whether at least one element in the array passes the test implemented by the provided function.
// find(): Returns the value of the first element in the array that satisfies the provided testing function.
// findIndex(): Returns the index of the first element in the array that satisfies the provided testing function.

// 4. Other Utility Methods:
//=========================================================================================================================================
// Array.isArray(): Determines whether the passed value is an Array.
// flat(): Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
// flatMap(): Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level.

const myArr = [0, 1, 2, 3, 4, 5, 6]
const myHeros = ["shaktiman", "naagraj"]

const myArr2 = new Array(1, 2, 3, 4);
console.log(myArr[1]); // 1

// Array methods
myArr.push(7) //[0, 1, 2,  3, 4,5, 6, 7]
myArr.push(10) //[0, 1, 2,  3, 4,5, 6, 7, 10]
myArr.pop()  //[0, 1, 2,  3, 4,5, 6, 7]
console.log(myArr);

myArr.unshift(100);
console.log(myArr) //[100, 0, 1, 2,  3, 4,5, 6, 7]
myArr.shift();
console.log(myArr);//[0, 1, 2,  3, 4,5, 6, 7]

console.log(myArr.includes(7)); // true
console.log(myArr.includes(100)); // false
console.log(myArr.indexOf(3)); // 3

const newArr = myArr.join()
console.log(newArr) // 0,1,2,3,4,5,6,7
console.log(typeof newArr) // string

// slice, splice
console.log("A", myArr);

const myn1 = myArr.slice(3, 6);//[ 3, 4, 5 ]
const myn2 = myArr.slice(1, 3);////[1, 2]
console.log(myArr);//[0, 1, 2,  3, 4,5, 6, 7]

console.log(myn1); //[ 3, 4, 5 ]
console.log(myn2); ////[1, 2]

const myn3 = myArr.splice(3, 6);//[ 3, 4, 5, 6, 7 ]
console.log(myn3);


const exmp = [1, 2, 3, 4, 5, 6, 7, 10]
const spliceExample = exmp.splice(3, 3);
console.log(spliceExample) // [ 4, 5, 6 ]
